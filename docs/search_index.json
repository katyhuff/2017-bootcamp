[
["index.html", "PI4 Computational Bootcamp Chapter 1 Syllabus 1.1 Instructors: 1.2 Course Objective 1.3 Pre-requisites 1.4 Agenda 1.5 Projects 1.6 References and further reading", " PI4 Computational Bootcamp David LeBauer and Neal Davis 2017-05-03 Chapter 1 Syllabus 1.1 Instructors: David LeBauer, Carl R Woese Institute for Genomic Biology Neal Davis, Deparatment of Comptuer Science, University of Illinois Teaching Assistant: TBD 1.2 Course Objective A two week course designed to introduce Math graduate students with little or no programming experience to methods in data analysis and computation. The goal is to prepare students to apply their understanding of math to solve problems in industry. This is the material from a 2 week Computational Bootcamp for PI4 students prior to beginning summer internships as part of the NSF funded PI4 Program for Interdisciplinary and Industrial Internships at Illinois. Previous years: 2016, 2015, 2014 courses focused more on numerical analysis. This year the focus is shifting to the use and analysis of large and complex data. 1.3 Pre-requisites Although the course is aimed at students with limited experience using software, you are expected to complete two introductory courses in order to become familiar with the basic syntax and operations in R and Python. Two free courses from DataCamp are Required; completion certificates must be mailed to the instructors by midnight June 25. Each of these courses should take a few hours to complete: Introduction to R * Introduction to Python for Data Science. *Students who have significant experience with R and / or Python may elect to substitute a more advanced course. 1.4 Agenda 1.4.1 Dates: May 26 – June 9, 2017 May 26: Computing Basics May 30-June 2: Data and Statistics in R June 5-June 8: Data and Machine Learning with Python June 9: Conclusion and Project Presentations 1.4.2 Daily Schedule: Time Activity 9:00 – 9:30 Review of questions related to material covered on previous days 9:30 – 10:30 Topic 1 10:30 – 10:45 Break 10:45 – 12:00 Topic 2 12:00 – 1:00 Lunch, ocassionally with guest lecture 1:00 – 2:00 Topic 3 2:00 – 3:00 Topic 4 3:00 – 3:15 Break 3:15 – 5:00 Group Projects 1.4.3 Day 1: Computing Fundamentals The Terminal SWC The Unix Shell) file system navigation scripting control flow Version Control SWC Git Novice 1-6 commiting changes branching merging Collaborative Coding SWC Git Novice 7-14 GitHub Code Reviews Software Development Reproducible Research Collaboration using Agile / Scrum iterative methodology Guest lecture ‘from the trenches?’ Group Projects: Setup Overview of available data Overview of scientific questions Divide into Teams Setup GitHub repository Formulate questions and hypotheses 1.4.4 Day 2: Getting started with R Getting Started with R and Rstudio (SWC 1-3) Loading and Evaluating Data data types vectorization Control Flow (if, else, for) SWC 7 Visualization SWC 8 Data Manipulation filtering, subsetting, summarizing, new variables with dplyr Converting data from wide to long with tidyr Project curate data design data management plan identify data that is needed / open questions The first half of the day will follow the R Novice Gapminder lesson http://swcarpentry.github.io/r-novice-gapminder/ 1.4.5 Day 3: Databases and Visualization Data structures Spreadsheets DC lesson Relational Databases non-relational databases Raster data and databases Querying databases SQL Connecting from R using the dplyr package Data Curation Metadata and Vocabularies Publishing Data, Archives and Repositories exploratory Data Analysis Data Cleaning with Open Refine (DC lesson 1-4)[http://www.datacarpentry.org/OpenRefine-ecology-lesson/] or, port to R Scatter Plots Visualization bestiary of plots, which plots for which data Turning tables into graphs Gelman et al 2002 Beyond Bar and line graphs Weissgerber et al 2015 Tufte, sparklines Project: Find data, clean, evaluate, and summarize, publish to GitHub 1.4.6 Day 4: Probability and Statistics Probability Distributions Bestiary, meaning, PDFs (Bolker Ch4, Dietze EE509) Stochastic Simulation (Bolker Ch5) Summary statistics Estimates of central tendency, variance, shape Fitting PDFs - parameter estimation goodness of fit (L, [A,B,D,]IC) Statistical Modeling Regression Functions Dynamic Models 1.4.7 Day 5 Model Building Descriptive Analysis Hypothesis Driven Analysis Model Fitting Frequentist, Bayesian Inference and Prediction Multilevel modeling ANOVA GLM HB 1.4.8 Days 6-9 (Neal Davis) Data mining (from MATLAB tutorials) Hadoop and MapReduce algorithm Basic ML (from MATLAB tutorials) Data mining topics: - Data cleaning - Principal component analysis - k-Nearest Neighbor clustering - k-D tree - Support Vector Machine - Monte Carlo simulation - k-Means clustering - Hierarchical clustering - Hidden Markov model Hadoop lesson: - MapReduce algorithm - What are Hadoop and friends? - Hadoop interface - Basic examples (word count, etc.) - PMU example 1.4.9 Day 10 Project Wrapup and Presentations Morning: Group project completion and write-up. Afternoon: Group Presentations (15 min each, open to public). 1.5 Projects 1.6 References and further reading A gallery of interesting Jupyter Notebooks "],
["intro.html", "Chapter 2 Day 1: 2.1 Version Control SWC Git Novice 1-6 2.2 Collaborative Coding SWC Git Novice 7-14 2.3 Software Development 2.4 Group Projects: Setup", " Chapter 2 Day 1: 2.1 Version Control SWC Git Novice 1-6 commiting changes branching merging 2.2 Collaborative Coding SWC Git Novice 7-14 * GitHub * Code Reviews 2.3 Software Development Reproducible Research Collaboration using Agile / Scrum iterative methodology Guest lecture ‘from the trenches?’ 2.4 Group Projects: Setup Overview of available data Overview of scientific questions Divide into Teams Setup GitHub repository Formulate questions and hypotheses "],
["the-terminal-unix-shell.html", "Chapter 3 The Terminal (Unix Shell) 3.1 Environment Variables 3.2 Find with grep 3.3 Find and replace with sed 3.4 For Loops 3.5 Shell Scripts 3.6 Regular Expressions (‘Regex’) 3.7 Real World Examples:", " Chapter 3 The Terminal (Unix Shell) “What is a command shell and why would I use one?” This tutorial is based on the Software Carpentry Unix Shell) (Devenyi, Koch, and Srinath 2016) lesson, and will refer to it for background information. Today we will learn - how the shell relates to the keyboard, the screen, the operating system, and users’ programs.&quot; - when and why command-line interfaces should be used instead of graphical interfaces. - similarities and differences between a file and a directory. - absolute and relative paths - steps in the shell’s read-run-print cycle. - learn about commands, flags, and filenames in a command-line call 3.0.1 Background A shell also known as a ‘terminal’ or ‘command line interface’ (CLI). A CLI is different from a graphical user interface (GUI), in that the CLI only responds to text whereas a GUI can respond to text as well as mouse inputs. Many GUI programs have a command line interface, although even if you don’t know it. In addition, the standard Unix shell provides access to a diverse range of standard programs. These make it easier to automate repetitive tasks as well as access other computers and servers. While the shell is powerful, at first it is unfamiliar with cryptic commands and operations. The heart of a CLI is a read-evaluate-print loop, or REPL: when the user types a command and then presses the Enter (or Return) key, the computer reads it, executes it, and prints its output. The user then types another command, and so on until the user logs off. Using Bash or any other shell sometimes feels more like programming than like using a mouse. Commands are terse (often only a couple of characters long), their names are frequently cryptic, and their output is lines of text rather than something visual like a graph. On the other hand, with only a few keystrokes, the shell allows us to combine existing tools into powerful pipelines and handle large volumes of data automatically. This automation not only makes us more productive but also improves the reproducibility of our workflows by allowing us to repeat them with few simple commands. In addition, the command line is often the easiest way to interact with remote machines and supercomputers. Familiarity with the shell is near essential to run a variety of specialized tools and resources including high-performance computing systems. As clusters and cloud computing systems become more popular for scientific data crunching, being able to interact with the shell is becoming a necessary skill. We can build on the command-line skills covered here to tackle a wide range of scientific questions and computational challenges. 3.0.2 Navigating Files and Directories In this section we will learn to move around on the computer, see what files and directories are there, and specify the location of a directory or file on your computer. Moving around on the computer: You will be used to navigating directories and files via a program such as Finder on Apple computers or File explorer on Windows. We can also navigate directories and look at files from the shell. Lets get started. When you open a terminal, you will see something like: dlebauer@dlebauer-desktop:~$ The $ is called the command prompt. The information before it provides information about the computer we are on, in this case the user and computer names. For the purposes of the tutorial, we will enter the command sh PS1='$ 'and press the ‘enter’ key so that only the$` shows up. This isn’t necessary to follow along, but it is useful to know that you can change the information that the command prompt provides. In fact, there are many ways to customize your Shell - the prompt as well as the way it presents text - that are beyond the scope of this course (but easy to find on Google). First type the command whoami whoami ## rstudio This tells you the user’s name. You will likely not have the same answer as the computer gave when it ran the code in this book. Now type the command pwd, which is short for ‘print working directory’ pwd ## /home/rstudio/pi4-computational-bootcamp This tells you your current working directory. On OSX it may look like /Users/dlebauer/ while on Linux it may look like /home/dlebauer and on Windows C:\\Users\\David LeBauer. What is in this direcotry? The program ls will tell you: ls ## 01-intro.Rmd ## 02-unix-shell.Rmd ## 03-version-control-github.Rmd ## 04-databases-and-sql.Rmd ## _book ## book.bib ## bookdown-demo.Rmd ## _bookdown_files ## _bookdown.yml ## docs ## index.Rmd ## packages.bib ## pi4-computational-bootcamp.Rproj ## README.md Most command line programs have many options. Options are often specified as ‘flags’ (perhaps because - looks like a flag pole?) Many shell programs provide common flags such as --help and --version (as well as synonyms -h and -v). Lets ask the shell for help with ls: ls --help ## Usage: ls [OPTION]... [FILE]... ## List information about the FILEs (the current directory by default). ## Sort entries alphabetically if none of -cftuvSUX nor --sort is specified. ## ## Mandatory arguments to long options are mandatory for short options too. ## -a, --all do not ignore entries starting with . ## -A, --almost-all do not list implied . and .. ## --author with -l, print the author of each file ## -b, --escape print C-style escapes for nongraphic characters ## --block-size=SIZE scale sizes by SIZE before printing them; e.g., ## &#39;--block-size=M&#39; prints sizes in units of ## 1,048,576 bytes; see SIZE format below ## -B, --ignore-backups do not list implied entries ending with ~ ## -c with -lt: sort by, and show, ctime (time of last ## modification of file status information); ## with -l: show ctime and sort by name; ## otherwise: sort by ctime, newest first ## -C list entries by columns ## --color[=WHEN] colorize the output; WHEN can be &#39;never&#39;, &#39;auto&#39;, ## or &#39;always&#39; (the default); more info below ## -d, --directory list directories themselves, not their contents ## -D, --dired generate output designed for Emacs&#39; dired mode ## -f do not sort, enable -aU, disable -ls --color ## -F, --classify append indicator (one of */=&gt;@|) to entries ## --file-type likewise, except do not append &#39;*&#39; ## --format=WORD across -x, commas -m, horizontal -x, long -l, ## single-column -1, verbose -l, vertical -C ## --full-time like -l --time-style=full-iso ## -g like -l, but do not list owner ## --group-directories-first ## group directories before files; ## can be augmented with a --sort option, but any ## use of --sort=none (-U) disables grouping ## -G, --no-group in a long listing, don&#39;t print group names ## -h, --human-readable with -l and/or -s, print human readable sizes ## (e.g., 1K 234M 2G) ## --si likewise, but use powers of 1000 not 1024 ## -H, --dereference-command-line ## follow symbolic links listed on the command line ## --dereference-command-line-symlink-to-dir ## follow each command line symbolic link ## that points to a directory ## --hide=PATTERN do not list implied entries matching shell PATTERN ## (overridden by -a or -A) ## --indicator-style=WORD append indicator with style WORD to entry names: ## none (default), slash (-p), ## file-type (--file-type), classify (-F) ## -i, --inode print the index number of each file ## -I, --ignore=PATTERN do not list implied entries matching shell PATTERN ## -k, --kibibytes default to 1024-byte blocks for disk usage ## -l use a long listing format ## -L, --dereference when showing file information for a symbolic ## link, show information for the file the link ## references rather than for the link itself ## -m fill width with a comma separated list of entries ## -n, --numeric-uid-gid like -l, but list numeric user and group IDs ## -N, --literal print raw entry names (don&#39;t treat e.g. control ## characters specially) ## -o like -l, but do not list group information ## -p, --indicator-style=slash ## append / indicator to directories ## -q, --hide-control-chars print ? instead of nongraphic characters ## --show-control-chars show nongraphic characters as-is (the default, ## unless program is &#39;ls&#39; and output is a terminal) ## -Q, --quote-name enclose entry names in double quotes ## --quoting-style=WORD use quoting style WORD for entry names: ## literal, locale, shell, shell-always, c, escape ## -r, --reverse reverse order while sorting ## -R, --recursive list subdirectories recursively ## -s, --size print the allocated size of each file, in blocks ## -S sort by file size ## --sort=WORD sort by WORD instead of name: none (-U), size (-S), ## time (-t), version (-v), extension (-X) ## --time=WORD with -l, show time as WORD instead of default ## modification time: atime or access or use (-u) ## ctime or status (-c); also use specified time ## as sort key if --sort=time ## --time-style=STYLE with -l, show times using style STYLE: ## full-iso, long-iso, iso, locale, or +FORMAT; ## FORMAT is interpreted like in &#39;date&#39;; if FORMAT ## is FORMAT1&lt;newline&gt;FORMAT2, then FORMAT1 applies ## to non-recent files and FORMAT2 to recent files; ## if STYLE is prefixed with &#39;posix-&#39;, STYLE ## takes effect only outside the POSIX locale ## -t sort by modification time, newest first ## -T, --tabsize=COLS assume tab stops at each COLS instead of 8 ## -u with -lt: sort by, and show, access time; ## with -l: show access time and sort by name; ## otherwise: sort by access time ## -U do not sort; list entries in directory order ## -v natural sort of (version) numbers within text ## -w, --width=COLS assume screen width instead of current value ## -x list entries by lines instead of by columns ## -X sort alphabetically by entry extension ## -Z, --context print any security context of each file ## -1 list one file per line ## --help display this help and exit ## --version output version information and exit ## ## The SIZE argument is an integer and optional unit (example: 10K is 10*1024). ## Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000). ## ## Using color to distinguish file types is disabled both by default and ## with --color=never. With --color=auto, ls emits color codes only when ## standard output is connected to a terminal. The LS_COLORS environment ## variable can change the settings. Use the dircolors command to set it. ## ## Exit status: ## 0 if OK, ## 1 if minor problems (e.g., cannot access subdirectory), ## 2 if serious trouble (e.g., cannot access command-line argument). ## ## GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt; ## Full documentation at: &lt;http://www.gnu.org/software/coreutils/ls&gt; ## or available locally via: info &#39;(coreutils) ls invocation&#39; for even more information, you can use man ls. 3.1 Environment Variables echo $PATH printenv 3.2 Find with grep 3.3 Find and replace with sed 3.4 For Loops for $i in in {seq 1 10}; do echo $i done 3.5 Shell Scripts 3.6 Regular Expressions (‘Regex’) Too long for today, difficult to learn, but examples are Googleable, like “Regex date range at end of string” 3.7 Real World Examples: 3.7.1 Advanced: Problem: changing file naming conventions broke a computing pipeline The recent calibration images brought to my attention that the SWIR naming convention has diverged from the VNIR. SWIR files now have an extra date string (right after the UUID) in their names, and also are missing an underscore before the english suffix. Was there a good reason for changing the naming convention? It would be helpful if SWIR used the same convention as VNIR. Otherwise we need to re-write the extractors to handle both conventions and be backwards compatible, etc. Questions * What is the UUID? * Why is having an extra date a problem? * How many dates can you find in the following code snippet? Are they consistent? zender@cg-gpu01:~/nco$ ls -l /projects/arpae/terraref/sites/ua-mac/raw_data/SWIR/2017-04-15/2017-04-15__11-59-12-426 total 481696 -rw-r--r-- 1 dlebauer grp_202 55123 Apr 15 12:03 f130c910-7887-49b0-97bb-db49e8c85e63_2017_04_15_12_05_11frameIndex.txt -rw-r--r-- 1 dlebauer grp_202 27533 Apr 15 12:03 f130c910-7887-49b0-97bb-db49e8c85e63_2017_04_15_12_05_11image.jpg -rw-r--r-- 1 dlebauer grp_202 493129728 Apr 15 12:03 f130c910-7887-49b0-97bb-db49e8c85e63_2017_04_15_12_05_11raw -rw-r--r-- 1 dlebauer grp_202 3503 Apr 15 12:03 f130c910-7887-49b0-97bb-db49e8c85e63_2017_04_15_12_05_11raw.hdr -rw-r--r-- 1 dlebauer grp_202 869 Apr 15 12:03 f130c910-7887-49b0-97bb-db49e8c85e63_2017_04_15_12_05_11settings.txt -rw-r--r-- 1 dlebauer grp_202 3561 Apr 15 12:03 f130c910-7887-49b0-97bb-db49e8c85e63_metadata.json zender@cg-gpu01:~/nco$ ls -l /projects/arpae/terraref/sites/ua-mac/raw_data/VNIR/2017-04-15/2017-04-15__11-56-59-902/ total 5204960 -rw-r--r-- 1 dlebauer grp_202 40591 Apr 15 12:00 ca045a19-7b12-4627-b700-9f51f5829b64_frameIndex.txt -rw-r--r-- 1 dlebauer grp_202 69299 Apr 15 12:00 ca045a19-7b12-4627-b700-9f51f5829b64_image.jpg -rw-r--r-- 1 dlebauer grp_202 3605 Apr 15 12:00 ca045a19-7b12-4627-b700-9f51f5829b64_metadata.json -rw-r--r-- 1 dlebauer grp_202 5329664000 Apr 15 12:02 ca045a19-7b12-4627-b700-9f51f5829b64_raw -rw-r--r-- 1 dlebauer grp_202 10257 Apr 15 12:01 ca045a19-7b12-4627-b700-9f51f5829b64_raw.hdr -rw-r--r-- 1 dlebauer grp_202 872 Apr 15 12:02 ca045a19-7b12-4627-b700-9f51f5829b64_settings.txt date is in directory name, date-time subdirectory, filename (for SWIR but not VNIR) and in the output from ls -l. note that there is a ~6 minute discrepancy between SWIR directory and filename. File timestamp is in between. Solution Part 1 Don’t change upstream formats / conventions without alerting downstream developers! After a few similar issues we created a protocol: upstream developers alert downstream developers before changing formats downstream developers write tests to catch errors upstream before they cause errors (in most cases, for the pipeline to break) This is a clear rule but difficult to enforce without extensive automated testing (in this case the tests are written, but the pipeline was lagging a few months behind and did not catch it). Solution Part 2 When Part 1 fails, write a script to rename all of the files. Lets take a look. #!/bin/bash cd /projects/arpae/terraref/sites/ua-mac/raw_data/SWIR/ for d in `/bin/ls -d 2016-11-0[89] 2016-11-[123]? 2016-12-?? 2017-??-??`; do yyyymmdd=$d drc_top=&quot;/projects/arpae/terraref/sites/ua-mac/raw_data/SWIR/${yyyymmdd}&quot; cd ${drc_top} for drc_sub in `/bin/ls -d ${yyyymmdd}*` ; do echo &quot;Renaming in directory ${drc_sub}...&quot; cd ${drc_top}/${drc_sub} for fl in `/bin/ls *raw` ; do dt_sng=`expr match &quot;${fl}&quot; &#39;.*\\([0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9]_[0-9][0-9]_[0-9][0-9]_[0-9][0-9]\\)\\.*&#39;` uuid_sng=${fl:0:36} done # !fl echo &quot;uuid=${uuid_sng}, dt=${dt_sng}&quot; for sfx in frameIndex.txt image.jpg raw raw.hdr settings.txt ; do mv_cmd=&quot;/bin/mv ${uuid_sng}_${dt_sng}${sfx} ${uuid_sng}_${sfx}&quot; echo &quot;/bin/mv ${uuid_sng}_${dt_sng}${sfx} ${uuid_sng}_${sfx}&quot; eval ${mv_cmd} done # !sfx done # !drc_sub done # !d ## sh: 3: cd: can&#39;t cd to /projects/arpae/terraref/sites/ua-mac/raw_data/SWIR/ ## /bin/ls: cannot access 2016-11-0[89]: No such file or directory ## /bin/ls: cannot access 2016-11-[123]?: No such file or directory ## /bin/ls: cannot access 2016-12-??: No such file or directory ## /bin/ls: cannot access 2017-??-??: No such file or directory Can you find: How many for-loops are they? How deeply are they nested? What do you think the following regex characters mean: [0-9]? [123] References "],
["version-control-reproducible-research-collaborative-development.html", "Chapter 4 “Version Control, Reproducible Research, Collaborative development” 4.1 Version Control SWC Git Novice 1-6 4.2 Collaborative Coding SWC Git Novice 7-14 4.3 Reproducible Research", " Chapter 4 “Version Control, Reproducible Research, Collaborative development” 4.1 Version Control SWC Git Novice 1-6 4.1.1 The Git Graph 4.1.2 commiting changes 4.1.3 branching 4.1.4 merging 4.2 Collaborative Coding SWC Git Novice 7-14 4.2.1 GitHub 4.2.2 Pull Requests &amp; Code Reviews 4.2.3 Messaging Slack IRC 4.3 Reproducible Research "],
["relational-databases-and-sql.html", "Chapter 5 Relational Databases and SQL 5.1 Relational Databases 5.2 SQL 5.3 Database Management Systems 5.4 Real World Examples", " Chapter 5 Relational Databases and SQL 5.1 Relational Databases 5.1.1 Tables 5.1.2 Data Normalization 5.1.3 Schemas 5.2 SQL 5.2.1 Select 5.2.2 Join 5.3 Database Management Systems 5.3.1 Common software MySQL, PostgreSQL, Oracle, Access?? 5.3.2 Connecting to a database server 5.3.3 API 5.4 Real World Examples 5.4.1 A Simple database Download data from BETYdb Discuss how to normalize it 5.4.2 Advanced: BETYdb Full Schema betydb.org/schemas How would you query all of the planting dates associated with a trait record? "]
]
